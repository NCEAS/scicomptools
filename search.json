[{"path":"https://nceas.github.io/scicomptools/articles/scicomptools.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"scicomptools Vignette","text":"scicomptools package built house self-contained tools built NCEAS Scientific Computing Team. functions written based needs various synthesis working groups function operates less independently others. hope tools valuable users outside context designed! vignette describes main functions scicomptools using examples.","code":"library(scicomptools)"},{"path":"https://nceas.github.io/scicomptools/articles/scicomptools.html","id":"extract-summary-statistics-tables","dir":"Articles","previous_headings":"Overview","what":"Extract Summary Statistics Tables","title":"scicomptools Vignette","text":"requested task–wide margin–help streamline analytical workflow stripping summary statistics (e.g., test statistic, P value, degrees freedom, etc.) whichever statistical test group decided use. ’ve developed extraction workflows various tests centralized stat_extract function. Currently, stat_extract accepts model fit objects lmerTest::lmer, stats::lm, stats::nls, stats::t.test, nlme::lme, ecodist::MRM, RRPP::trajectory.analysis. model fits passed mod_fit argument. model trajectory analysis, traj_angle argument must supplied well (either “deg” “rad” whether multivariate angle expressed degrees radians). models fit, can passed stat_extract extraction typically-desired summary values. Note: stat_extract determines model type automatically need specified. tests used working groups plan adding set model objects stat_extract supports. Feel free post GitHub issue model type mind ’d like request expand stat_extract support.","code":"# Fit models of several accepted types ## Student's t-Test mod_t <- t.test(x = 1:10, y = 7:20)  ## Nonlinear Least Squares mod_nls <- fm1DNase1 <- nls(density ~ SSlogis(log(conc), Asym, xmid, scal), data = DNase)  # Extract the relevant information ## t-Test scicomptools::stat_extract(mod_fit = mod_t) #>   Estimate       DF  T_Value      P_Value #> 1      5.5 21.98221 -5.43493 1.855282e-05 #> 2     13.5 21.98221 -5.43493 1.855282e-05  ## NLS scicomptools::stat_extract(mod_fit = mod_nls) #>   Term Estimate  Std_Error  T_Value      P_Value #> 1 Asym 2.485319 0.06287043 39.53081 1.519039e-88 #> 2 xmid 1.518117 0.06396583 23.73325 2.704647e-56 #> 3 scal 1.098307 0.02442013 44.97549 2.203937e-97"},{"path":"https://nceas.github.io/scicomptools/articles/scicomptools.html","id":"create-google-drive-table-of-contents","dir":"Articles","previous_headings":"Overview","what":"Create Google Drive Table of Contents","title":"scicomptools Vignette","text":"Google Drive far common platform working groups support leverage store data. googledrive package makes integrating script inputs outputs specified Drive folders easy internal folder structure Google Drives often becomes convoluted projects evolve priorities shift. wrote drive_toc function identify folders given Drive folder (either top-level link sub-folder link work) create diagram hierarchy make simpler group’s visualize Drive’s “table contents”. function url argument requires Drive ID (.e., link passed googledrive::as_id). also ignore_names argument allows users specify folder names like excluded table contents; useful many sub-folders contain “deprecated” “archive” folder greatly clutter full table contents include repeated folders like . Finally, process can take seconds complicated Drives message returned default folder function identifying sub-folders. quiet argument defaults FALSE progress reported can set TRUE desire message returned.","code":"scicomptools::drive_toc(url = googledrive::as_id(\"https://drive.google.com/drive/u/0/folders/folder-specific-characters\"),                         ignore_names = c(\"Archive\", \"Deprecated\", \"Backups\"),                         quiet = FALSE)"},{"path":"https://nceas.github.io/scicomptools/articles/scicomptools.html","id":"read-in-multiple-excel-sheets","dir":"Articles","previous_headings":"Overview","what":"Read in Multiple Excel Sheets","title":"scicomptools Vignette","text":"Working groups often store data Microsoft Excel files multiple sheets (often one sheet per data type per collection location). wrote read_xl_sheets import every sheet user-specified MS Excel file store sheet list. every sheet columns, can easily unlist flat dataframe (rather somewhat laborious process reading sheet separately). read_xl_sheets single argument (file_name) accepts name (path ) MS Excel file read. also wrote companion function named read_xl_format specific formatting cells sheets Excel file extracted. useful fill color text formatting used denote information redundant columns (.e., information lost reading Excel sheet API). read_xl_format uses syntax read_xl_sheets maximize interoperability.","code":"# Read in sheets sheet_list <- scicomptools::read_xl_sheets(file_name = system.file(\"extdata\", \"faux_data.xlsx\",                                                       package = \"scicomptools\"))  # Show structure dplyr::glimpse(sheet_list) #> List of 2 #>  $ my_data: tibble [5 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ col_1: chr [1:5] \"a\" \"b\" \"c\" \"d\" ... #>   ..$ col_2: chr [1:5] \"A\" \"A\" \"A\" \"B\" ... #>   ..$ col_3: num [1:5] 2 43 2 2 2 #>   ..$ col_4: num [1:5] 234 435 32 45 4 #>   ..$ col_5: num [1:5] 236 478 34 47 6 #>  $ data_2 : tibble [2 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ col_2      : chr [1:2] \"A\" \"B\" #>   ..$ temperature: num [1:2] 10 20 # Read in *format of* sheets form_list <- scicomptools::read_xl_format(file_name = system.file(\"extdata\", \"faux_data.xlsx\",                                                       package = \"scicomptools\"))  # Show structure of that dplyr::glimpse(form_list) #> Rows: 36 #> Columns: 13 #> $ sheet         <chr> \"my_data\", \"my_data\", \"my_data\", \"my_data\", \"my_data\", \"… #> $ address       <chr> \"A1\", \"B1\", \"C1\", \"D1\", \"E1\", \"A2\", \"B2\", \"C2\", \"D2\", \"E… #> $ row           <int> 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4,… #> $ col           <int> 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4,… #> $ cell_contents <chr> \"col_1\", \"col_2\", \"col_3\", \"col_4\", \"col_5\", \"a\", \"A\", \"… #> $ comment       <chr> NA, NA, NA, NA, \"Nick Lyon:Hello world\", NA, NA, NA, NA,… #> $ formula       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, \"SUM(C2:D2)\", NA, NA… #> $ bold          <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TR… #> $ italic        <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, … #> $ underline     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ font_size     <dbl> 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, … #> $ font_color    <chr> \"FF000000\", \"FF000000\", \"FF000000\", \"FF000000\", \"FF00000… #> $ cell_color    <chr> NA, NA, NA, NA, NA, NA, NA, \"FFFFFFFF\", NA, NA, NA, NA, …"},{"path":"https://nceas.github.io/scicomptools/articles/scicomptools.html","id":"handling-two-working-directories","dir":"Articles","previous_headings":"Overview","what":"Handling Two Working Directories","title":"scicomptools Vignette","text":"Many working groups support work local computers well remote servers. leverage Git GitHub pass code updates back forth two environments updating working directory every time pivot made cumbersome. thus written wd_loc purpose! wd_loc allows users specify two working directory paths toggle using logical argument. local argument accepts logical value. local = TRUE, file path specified local_path argument returned character string. local = FALSE file path specified remote_path argument used. local_path defaults base::getwd() need specified using RStudio Projects. can run wd_loc inside base::setwd desired though recommend assigning file path “path” object invoking whenever import export must done.","code":"scicomptools::wd_loc(local = TRUE,                      local_path = getwd(),                      remote_path = file.path(\"path on server\")) #> /Users/.../scicomptools/vignettes"},{"path":"https://nceas.github.io/scicomptools/articles/scicomptools.html","id":"checking-tokens","dir":"Articles","previous_headings":"Overview","what":"Checking Tokens","title":"scicomptools Vignette","text":"operations require passing user’s personal access token (.k.. “PAT”) RStudio. workflows can fail unexpectedly token improperly set expires valuable double check whether token still embedded. token_check function checks whether token attached messages whether one found. Currently function supports checks Qualtrics GitHub tokens can expanded need (post GitHub issue another token mind!). Additionally, secret = TRUE (default) success message simply identifies whether token found. secret = FALSE success message prints token string console.","code":"scicomptools::token_check(api = \"github\", secret = TRUE)"},{"path":"https://nceas.github.io/scicomptools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Julien Brun. Author. Angel Chen. Author, maintainer.            angelchen7.github.io Gabriel Antunes Daldegan. Author. Gabe De La Rosa. Contributor.           www.gabrieldelarosa.com/ Kara Koenig. Author. Nicholas J Lyon. Author.            njlyon0.github.io Kendall Miller. Author. Timothy D Nguyen. Author.           www.linkedin.com//timothy-d-nguyen National Science Foundation. Funder.           NSF 1929393, 09/01/2019 - 08/31/2024 University California, Santa Barbara. Copyright holder.","code":""},{"path":"https://nceas.github.io/scicomptools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Brun J, Chen , Antunes Daldegan G, Koenig K, Lyon N, Miller K, Nguyen T (2024). scicomptools: Tools Developed NCEAS Scientific Computing Support Team. R package version 1.0.0.900, https://nceas.github.io/scicomptools/, https://github.com/NCEAS/scicomptools.","code":"@Manual{,   title = {scicomptools: Tools Developed by the NCEAS Scientific Computing Support Team},   author = {Julien Brun and Angel Chen and Gabriel {Antunes Daldegan} and Kara Koenig and Nicholas J Lyon and Kendall Miller and Timothy D Nguyen},   year = {2024},   note = {R package version 1.0.0.900, https://nceas.github.io/scicomptools/},   url = {https://github.com/NCEAS/scicomptools}, }"},{"path":"https://nceas.github.io/scicomptools/index.html","id":"scicomptools---tools-developed-by-the-nceas-scientific-computing-support-team","dir":"","previous_headings":"","what":"Tools Developed by the NCEAS Scientific Computing Support Team","title":"Tools Developed by the NCEAS Scientific Computing Support Team","text":"goal scicomptools house standalone functions written National Center Ecological Analysis Synthesis (NCEAS) Scientific Computing Team staff lack specific project. Currently contains various tools import, summarize, visualize data. Non-function scripts created team part scicomptasks repository.","code":""},{"path":"https://nceas.github.io/scicomptools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools Developed by the NCEAS Scientific Computing Support Team","text":"can install development version scicomptools GitHub : download CRAN :","code":"# install.packages(\"devtools\") devtools::install_github(\"NCEAS/scicomptools\") install.packages(\"scicomptools\")"},{"path":[]},{"path":"https://nceas.github.io/scicomptools/index.html","id":"modeling--analysis","dir":"","previous_headings":"Current Functions","what":"Modeling / Analysis","title":"Tools Developed by the NCEAS Scientific Computing Support Team","text":"stat_extract Extracts core summary statistics model fit objects returned following functions: lmerTest::lmer, stats::lm, stats::nls, stats::t.test, nlme::lme, ecodist::MRM, RRPP::trajectory.analysis","code":""},{"path":"https://nceas.github.io/scicomptools/index.html","id":"google-drive-related","dir":"","previous_headings":"Current Functions","what":"Google Drive-Related","title":"Tools Developed by the NCEAS Scientific Computing Support Team","text":"drive_toc: Identifies complete folder hierarchy within user-supplied URL Google Drive folder. Useful generating table contents Google Drive. Also allows exclusion folders name folders want included table contents","code":""},{"path":"https://nceas.github.io/scicomptools/index.html","id":"data-description--wrangling","dir":"","previous_headings":"Current Functions","what":"Data Description / Wrangling","title":"Tools Developed by the NCEAS Scientific Computing Support Team","text":"molec_wt: Identifies molecular weight specified element (based name, symbol, atomic number) read_xl_sheets: Reads sheets supplied Microsoft Excel workbook returns list contents read_xl_format: Identifies formatting every cell supplied Microsoft Excel workbook (including comment text)","code":""},{"path":"https://nceas.github.io/scicomptools/index.html","id":"text-mining","dir":"","previous_headings":"Current Functions","what":"Text Mining","title":"Tools Developed by the NCEAS Scientific Computing Support Team","text":"word_cloud_prep: Performs text mining given text column dataframe create dataframe ready word cloud creation word_cloud_plot: Performs text mining (using word_cloud_prep) creates simple ggplot2 word cloud (don’t want handle plotting aesthetics)","code":""},{"path":"https://nceas.github.io/scicomptools/index.html","id":"working-directory-management","dir":"","previous_headings":"Current Functions","what":"Working Directory Management","title":"Tools Developed by the NCEAS Scientific Computing Support Team","text":"wd_loc: Allows user easily specify file paths local remote work toggle script needed. Useful work done local computers remote server","code":""},{"path":"https://nceas.github.io/scicomptools/index.html","id":"checking-access-tokens","dir":"","previous_headings":"Current Functions","what":"Checking Access Tokens","title":"Tools Developed by the NCEAS Scientific Computing Support Team","text":"token_check: Checks whether token supplied API can found current R session. example, Qualtrics allows direct acquisition data R token R session “knows” string. function quickly checks whether ’d able use workflow (currently supports search Qualtrics GitHub tokens easily expanded!)","code":""},{"path":"https://nceas.github.io/scicomptools/reference/drive_toc.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify all Folders within Specified Google Drive Folder — drive_toc","title":"Identify all Folders within Specified Google Drive Folder — drive_toc","text":"Identifies sub-folders within user-supplied Drive folder (typically top-level URL). Also allows exclusion folders name; useful \"Backups\" \"Archive\" folder complex table contents unwanted folder(s).","code":""},{"path":"https://nceas.github.io/scicomptools/reference/drive_toc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify all Folders within Specified Google Drive Folder — drive_toc","text":"","code":"drive_toc(url = NULL, ignore_names = NULL, quiet = FALSE)"},{"path":"https://nceas.github.io/scicomptools/reference/drive_toc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify all Folders within Specified Google Drive Folder — drive_toc","text":"url (drive_id) Google Drive folder link modified `googledrive::as_id` true \"Drive ID\" (e.g., `url = as_id(\"url text\")`) ignore_names (character) Vector name(s) folder(s) excluded list folders quiet (logical) Whether message folder currently listing (defaults `FALSE`). Complex folder structures take time fully process informative per-folder message provides solace function stopped working","code":""},{"path":"https://nceas.github.io/scicomptools/reference/drive_toc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify all Folders within Specified Google Drive Folder — drive_toc","text":"(node / R6) Special object class used `data.tree` package","code":""},{"path":"https://nceas.github.io/scicomptools/reference/drive_toc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify all Folders within Specified Google Drive Folder — drive_toc","text":"","code":"if (FALSE) { # \\dontrun{ # Supply a single Google Drive folder link to identify all its sub-folders  drive_toc(url = googledrive::as_id(\"https://drive.google.com/drive/u/0/folders/your-folder\")) } # }"},{"path":"https://nceas.github.io/scicomptools/reference/molec_wt.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Molecular Weight for a Given Element — molec_wt","title":"Identify Molecular Weight for a Given Element — molec_wt","text":"Identifies molecular weight specified element based element's name, symbol, atomic number. Returns molecular weight numeric value.","code":""},{"path":"https://nceas.github.io/scicomptools/reference/molec_wt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Molecular Weight for a Given Element — molec_wt","text":"","code":"molec_wt(element = NULL)"},{"path":"https://nceas.github.io/scicomptools/reference/molec_wt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Molecular Weight for a Given Element — molec_wt","text":"element (character/numeric) element name, symbol, atomic number retrieve molecular weight","code":""},{"path":"https://nceas.github.io/scicomptools/reference/molec_wt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Molecular Weight for a Given Element — molec_wt","text":"(numeric) molecular weight value relevant element","code":""},{"path":"https://nceas.github.io/scicomptools/reference/molec_wt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Molecular Weight for a Given Element — molec_wt","text":"","code":"# Identify molecular weight for carbon by name molec_wt(element = \"Carbon\") #> [1] 12.011  # Identify molecular weight for hydrogen by atomic number molec_wt(element = 1) #> [1] 1.007"},{"path":"https://nceas.github.io/scicomptools/reference/read_xl_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Formatting of All Sheets in an Excel Workbook — read_xl_format","title":"Read Formatting of All Sheets in an Excel Workbook — read_xl_format","text":"Retrieves sheets Microsoft Excel workbook identifies formatting value (including column headers blank cells).","code":""},{"path":"https://nceas.github.io/scicomptools/reference/read_xl_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Formatting of All Sheets in an Excel Workbook — read_xl_format","text":"","code":"read_xl_format(file_name = NULL)"},{"path":"https://nceas.github.io/scicomptools/reference/read_xl_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Formatting of All Sheets in an Excel Workbook — read_xl_format","text":"file_name (character) Name (path ) Excel workbook","code":""},{"path":"https://nceas.github.io/scicomptools/reference/read_xl_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Formatting of All Sheets in an Excel Workbook — read_xl_format","text":"(data frame) One row per cell dataframe column type relevant formatting 'address' within original Excel workbook","code":""},{"path":"https://nceas.github.io/scicomptools/reference/read_xl_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Formatting of All Sheets in an Excel Workbook — read_xl_format","text":"","code":"# Identify the formatting of every cell in all sheets of an Excel file read_xl_format(file_name = system.file(\"extdata\", \"excel_book.xlsx\", package = \"scicomptools\")) #>           sheet address row col cell_contents                           comment #> 1   first_table      A1   1   1         col_1                              <NA> #> 2   first_table      B1   1   2         col_2                              <NA> #> 3   first_table      A2   2   1           cat                              <NA> #> 4   first_table      B2   2   2             2                              <NA> #> 5   first_table      A3   3   1           dog                              <NA> #> 6   first_table      B3   3   2             1                              <NA> #> 7   first_table      A4   4   1          bird                              <NA> #> 8   first_table      B4   4   2             3                              <NA> #> 9   first_table      A5   5   1          fish                              <NA> #> 10  first_table      B5   5   2             5                              <NA> #> 11 second_table      A1   1   1          name                              <NA> #> 12 second_table      B1   1   2         order                              <NA> #> 13 second_table      C1   1   3      quantity Microsoft Office User:comment\\r\\n #> 14 second_table      A2   2   1          Alex                              <NA> #> 15 second_table      B2   2   2        item_1                              <NA> #> 16 second_table      C2   2   3            65                              <NA> #> 17 second_table      A3   3   1          Jane                              <NA> #> 18 second_table      B3   3   2        item_2                              <NA> #> 19 second_table      C3   3   3            23                              <NA> #> 20 second_table      A4   4   1           Max                              <NA> #> 21 second_table      B4   4   2        item_3                              <NA> #> 22 second_table      C4   4   3            30                              <NA> #> 23  third_table      A1   1   1          date                              <NA> #> 24  third_table      B1   1   2          site                              <NA> #> 25  third_table      C1   1   3          plot                              <NA> #> 26  third_table      D1   1   4       species                              <NA> #> 27  third_table      A2   2   1    2023-01-04                              <NA> #> 28  third_table      B2   2   2        site_1                              <NA> #> 29  third_table      C2   2   3             A                              <NA> #> 30  third_table      D2   2   4     species_1                              <NA> #> 31  third_table      A3   3   1    2023-02-10                              <NA> #> 32  third_table      B3   3   2        site_1                              <NA> #> 33  third_table      C3   3   3             B                              <NA> #> 34  third_table      D3   3   4     species_1                              <NA> #> 35  third_table      A4   4   1    2023-03-11                              <NA> #> 36  third_table      B4   4   2        site_2                              <NA> #> 37  third_table      C4   4   3             A                              <NA> #> 38  third_table      D4   4   4     species_1                              <NA> #> 39  third_table      A5   5   1    2023-04-28                              <NA> #> 40  third_table      B5   5   2        site_2                              <NA> #> 41  third_table      C5   5   3             B                              <NA> #> 42  third_table      D5   5   4     species_1                              <NA> #>    formula  bold italic underline font_size font_color cell_color #> 1     <NA>  TRUE  FALSE      <NA>        12   FF000000       <NA> #> 2     <NA>  TRUE  FALSE      <NA>        12   FF000000       <NA> #> 3     <NA> FALSE   TRUE      <NA>        12   FF000000       <NA> #> 4     <NA> FALSE  FALSE      <NA>        12   FF4472C4       <NA> #> 5     <NA> FALSE   TRUE      <NA>        12   FF000000       <NA> #> 6     <NA> FALSE  FALSE      <NA>        12   FF4472C4       <NA> #> 7     <NA> FALSE   TRUE      <NA>        12   FF000000       <NA> #> 8     <NA> FALSE  FALSE      <NA>        12   FF4472C4       <NA> #> 9     <NA> FALSE   TRUE      <NA>        12   FF000000       <NA> #> 10    <NA> FALSE  FALSE      <NA>        12   FF4472C4       <NA> #> 11    <NA>  TRUE  FALSE      <NA>        12   FF000000       <NA> #> 12    <NA>  TRUE  FALSE      <NA>        12   FF000000       <NA> #> 13    <NA>  TRUE  FALSE      <NA>        12   FF000000       <NA> #> 14    <NA> FALSE  FALSE      <NA>        12   FF000000   FFFFFFFF #> 15    <NA> FALSE  FALSE      <NA>        12   FF000000       <NA> #> 16    <NA> FALSE  FALSE      <NA>        12   FF000000       <NA> #> 17    <NA> FALSE  FALSE      <NA>        12   FF000000   FFFFFFFF #> 18    <NA> FALSE  FALSE      <NA>        12   FF000000       <NA> #> 19    <NA> FALSE  FALSE      <NA>        12   FF000000       <NA> #> 20    <NA> FALSE  FALSE      <NA>        12   FF000000   FFFFFFFF #> 21    <NA> FALSE  FALSE      <NA>        12   FF000000       <NA> #> 22    <NA> FALSE  FALSE      <NA>        12   FF000000       <NA> #> 23    <NA>  TRUE  FALSE      <NA>        12   FF000000       <NA> #> 24    <NA>  TRUE  FALSE      <NA>        12   FF000000       <NA> #> 25    <NA>  TRUE  FALSE      <NA>        12   FF000000       <NA> #> 26    <NA>  TRUE  FALSE      <NA>        12   FF000000       <NA> #> 27    <NA> FALSE  FALSE      <NA>        12   FF000000       <NA> #> 28    <NA> FALSE  FALSE      <NA>        12   FF000000       <NA> #> 29    <NA> FALSE  FALSE      <NA>        12   FF000000       <NA> #> 30    <NA> FALSE  FALSE    single        12   FF000000       <NA> #> 31    <NA> FALSE  FALSE      <NA>        12   FF000000       <NA> #> 32    <NA> FALSE  FALSE      <NA>        12   FF000000       <NA> #> 33    <NA> FALSE  FALSE      <NA>        12   FF000000       <NA> #> 34    <NA> FALSE  FALSE    single        12   FF000000       <NA> #> 35    <NA> FALSE  FALSE      <NA>        12   FF000000       <NA> #> 36    <NA> FALSE  FALSE      <NA>        12   FF000000       <NA> #> 37    <NA> FALSE  FALSE      <NA>        12   FF000000       <NA> #> 38    <NA> FALSE  FALSE    single        12   FF000000       <NA> #> 39    <NA> FALSE  FALSE      <NA>        12   FF000000       <NA> #> 40    <NA> FALSE  FALSE      <NA>        12   FF000000       <NA> #> 41    <NA> FALSE  FALSE      <NA>        12   FF000000       <NA> #> 42    <NA> FALSE  FALSE    single        12   FF000000       <NA>"},{"path":"https://nceas.github.io/scicomptools/reference/read_xl_sheets.html","id":null,"dir":"Reference","previous_headings":"","what":"Read All Sheets from an Excel Workbook — read_xl_sheets","title":"Read All Sheets from an Excel Workbook — read_xl_sheets","text":"Retrieves sheets given Microsoft Excel workbook stores elements list. Note guts function created developers `readxl::read_excel()` merely created wrapper function invoke work easily.","code":""},{"path":"https://nceas.github.io/scicomptools/reference/read_xl_sheets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read All Sheets from an Excel Workbook — read_xl_sheets","text":"","code":"read_xl_sheets(file_name = NULL)"},{"path":"https://nceas.github.io/scicomptools/reference/read_xl_sheets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read All Sheets from an Excel Workbook — read_xl_sheets","text":"file_name (character) Name (path ) Excel workbook","code":""},{"path":"https://nceas.github.io/scicomptools/reference/read_xl_sheets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read All Sheets from an Excel Workbook — read_xl_sheets","text":"(list) One tibble per sheet Excel workbook stored separate elements list","code":""},{"path":"https://nceas.github.io/scicomptools/reference/read_xl_sheets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read All Sheets from an Excel Workbook — read_xl_sheets","text":"","code":"# Read in each sheet as an element in a list read_xl_sheets(file_name = system.file(\"extdata\", \"excel_book.xlsx\", package = \"scicomptools\")) #> $first_table #> # A tibble: 4 × 2 #>   col_1 col_2 #>   <chr> <dbl> #> 1 cat       2 #> 2 dog       1 #> 3 bird      3 #> 4 fish      5 #>  #> $second_table #> # A tibble: 3 × 3 #>   name  order  quantity #>   <chr> <chr>     <dbl> #> 1 Alex  item_1       65 #> 2 Jane  item_2       23 #> 3 Max   item_3       30 #>  #> $third_table #> # A tibble: 4 × 4 #>   date                site   plot  species   #>   <dttm>              <chr>  <chr> <chr>     #> 1 2023-01-04 00:00:00 site_1 A     species_1 #> 2 2023-02-10 00:00:00 site_1 B     species_1 #> 3 2023-03-11 00:00:00 site_2 A     species_1 #> 4 2023-04-28 00:00:00 site_2 B     species_1 #>"},{"path":"https://nceas.github.io/scicomptools/reference/stat_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Summary Statistics from Model Fit Object — stat_extract","title":"Extract Summary Statistics from Model Fit Object — stat_extract","text":"Accepts model fit object extracts core statistical information. includes P value, test statistic, degrees freedom, etc. Currently accepts following model types: `stats::t.test`, `stats::lm`, `stats_nls`, `nlme::lme`, `lmerTest::lmer`, `ecodist::MRM`, `RRPP::trajectory.analysis`","code":""},{"path":"https://nceas.github.io/scicomptools/reference/stat_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Summary Statistics from Model Fit Object — stat_extract","text":"","code":"stat_extract(mod_fit = NULL, traj_angle = \"deg\")"},{"path":"https://nceas.github.io/scicomptools/reference/stat_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Summary Statistics from Model Fit Object — stat_extract","text":"mod_fit (lme, trajectory.analysis) Model fit object supported class (see function description text) traj_angle (character) Either \"deg\" \"rad\" whether trajectory analysis angle information extracted degrees radians. required model trajectory analysis","code":""},{"path":"https://nceas.github.io/scicomptools/reference/stat_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Summary Statistics from Model Fit Object — stat_extract","text":"(data.frame) Dataframe core summary statistics given model","code":""},{"path":"https://nceas.github.io/scicomptools/reference/stat_extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Summary Statistics from Model Fit Object — stat_extract","text":"","code":"# Create some example data x <- c(3.5, 2.1, 7.5, 5.6, 3.3, 6.0, 5.6) y <- c(2.3, 4.7, 7.8, 9.1, 4.5, 3.6, 5.1)  # Fit a linear model mod <- lm(y ~ x)  # Extract the relevant information stat_extract(mod_fit = mod) #>          Term  Estimate Std_Error   T_Value   P_Value #> 1 (Intercept) 2.0661017 2.4263807 0.8515159 0.4333616 #> 2           x 0.6737288 0.4751741 1.4178568 0.2154314"},{"path":"https://nceas.github.io/scicomptools/reference/token_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Token Status — token_check","title":"Check Token Status — token_check","text":"make direct--API workflows functional (e.g., Qualtrics surveys, etc.). necessary quickly test whether given R session \"knows\" API token. function returns error specified token type found prints message one found","code":""},{"path":"https://nceas.github.io/scicomptools/reference/token_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Token Status — token_check","text":"","code":"token_check(api = \"qualtrics\", secret = TRUE)"},{"path":"https://nceas.github.io/scicomptools/reference/token_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Token Status — token_check","text":"api (character) API token (currently supports \"qualtrics\" \"github\") secret (logical) Whether include token character string success message. FALSE prints token, TRUE keeps secret returns success message","code":""},{"path":"https://nceas.github.io/scicomptools/reference/token_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Token Status — token_check","text":"return value, called side effects","code":""},{"path":"https://nceas.github.io/scicomptools/reference/token_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Token Status — token_check","text":"","code":"if (FALSE) { # \\dontrun{ # Check whether a GitHub token is attached or not token_check(api = \"github\", secret = TRUE) } # } if (FALSE) { # \\dontrun{ # Check whether a Qualtrics token is attached or not token_check(api = \"qualtrics\", secret = TRUE) } # }"},{"path":"https://nceas.github.io/scicomptools/reference/wd_loc.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Local or Remote Working Directories — wd_loc","title":"Define Local or Remote Working Directories — wd_loc","text":"working script remote server locally home computer, defining file paths can unwieldy may even require duplicate scripts–one location–require maintenance parallel. function allows define whether working locally specify path use either case.","code":""},{"path":"https://nceas.github.io/scicomptools/reference/wd_loc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Local or Remote Working Directories — wd_loc","text":"","code":"wd_loc(local = TRUE, local_path = getwd(), remote_path = NULL)"},{"path":"https://nceas.github.io/scicomptools/reference/wd_loc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Local or Remote Working Directories — wd_loc","text":"local (logical) Whether working locally remote server local_path (character) File path use `local` `TRUE` (defaults `getwd()`) remote_path (character) File path use `local` `FALSE`","code":""},{"path":"https://nceas.github.io/scicomptools/reference/wd_loc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Local or Remote Working Directories — wd_loc","text":"(character) Either entry `local_path` `remote_path` depending whether `local` set true false","code":""},{"path":"https://nceas.github.io/scicomptools/reference/wd_loc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define Local or Remote Working Directories — wd_loc","text":"","code":"# Set two working directory paths to toggle between  # If you are working in your local computer, set `local` to \"TRUE\" wd_loc(local = TRUE,        local_path = file.path(\"local path\"),        remote_path = file.path(\"path on server\")) #> [1] \"local path\"         # If you are working in a remote server, set `local` to \"FALSE\" wd_loc(local = FALSE,        local_path = file.path(\"local path\"),        remote_path = file.path(\"path on server\")) #> [1] \"path on server\""},{"path":"https://nceas.github.io/scicomptools/reference/word_cloud_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Text Mine a Given Column and Create a Word Cloud — word_cloud_plot","title":"Text Mine a Given Column and Create a Word Cloud — word_cloud_plot","text":"Mines user-defined column text creates word cloud identified words bigrams.","code":""},{"path":"https://nceas.github.io/scicomptools/reference/word_cloud_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Text Mine a Given Column and Create a Word Cloud — word_cloud_plot","text":"","code":"word_cloud_plot(   data = NULL,   text_column = NULL,   word_count = 50,   known_bigrams = c(\"working group\") )"},{"path":"https://nceas.github.io/scicomptools/reference/word_cloud_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Text Mine a Given Column and Create a Word Cloud — word_cloud_plot","text":"data dataframe containing least one column text_column character, name column dataframe given `data` contains text mined word_count numeric, number words returned (counts least frequent) known_bigrams character vector, bigrams (two-word phrases) mined mining single words","code":""},{"path":"https://nceas.github.io/scicomptools/reference/word_cloud_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Text Mine a Given Column and Create a Word Cloud — word_cloud_plot","text":"dataframe one column (named 'word') can used word cloud creation. One row per bigram supplied `known_bigrams` single word (including \"stop words\")","code":""},{"path":"https://nceas.github.io/scicomptools/reference/word_cloud_prep.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Text Mining of a Given Column — word_cloud_prep","title":"Perform Text Mining of a Given Column — word_cloud_prep","text":"Mines user-defined column create dataframe ready creating word cloud. also identifies user-defined \"bigrams\" (.e., two-word phrases) supplied vector.","code":""},{"path":"https://nceas.github.io/scicomptools/reference/word_cloud_prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Text Mining of a Given Column — word_cloud_prep","text":"","code":"word_cloud_prep(   data = NULL,   text_column = NULL,   word_count = 50,   known_bigrams = c(\"working group\") )"},{"path":"https://nceas.github.io/scicomptools/reference/word_cloud_prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Text Mining of a Given Column — word_cloud_prep","text":"data (dataframe) Data object containing least one column text_column (character) Name column dataframe given `data` contains text mined word_count (numeric) Number words returned (counts least frequent) known_bigrams (character) Vector bigrams (two-word phrases) mined mining single words","code":""},{"path":"https://nceas.github.io/scicomptools/reference/word_cloud_prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Text Mining of a Given Column — word_cloud_prep","text":"dataframe one column (named 'word') can used word cloud creation. One row per bigram supplied `known_bigrams` single word (including \"stop words\")","code":""},{"path":"https://nceas.github.io/scicomptools/reference/word_cloud_prep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Text Mining of a Given Column — word_cloud_prep","text":"","code":"# Create a dataframe containing some example text text <- data.frame(article_num = 1:6,                    article_title = c(\"Why pigeons are the best birds\",                                      \"10 ways to show your pet budgie love\",                                      \"Should you feed ducks at the park?\",                                      \"Locations and tips for birdwatching\",                                      \"How to tell which pet bird is right for you\",                                      \"Do birds make good pets?\"))                                       # Prepare the dataframe for word cloud plotting               word_cloud_prep(data = text, text_column = \"article_title\") #> # A tibble: 11 × 4 #>    word             n angle color_groups #>    <chr>        <int> <dbl> <fct>        #>  1 bird             3     0 9            #>  2 birdwatching     1    90 5            #>  3 budgie           1   -45 5            #>  4 duck             1     0 8            #>  5 feed             1     0 2            #>  6 location         1     0 7            #>  7 love             1     0 5            #>  8 park             1     0 5            #>  9 pet              3     0 2            #> 10 pigeon           1    90 6            #> 11 tip              1    90 4"},{"path":"https://nceas.github.io/scicomptools/news/index.html","id":"scicomptools-100900","dir":"Changelog","previous_headings":"","what":"scicomptools 1.0.0.900","title":"scicomptools 1.0.0.900","text":"Development version scicomptools. Changes preceding version listed made. New function: molec_wt. Identifies molecular weight specified element based element name, symbol, atomic number Unit tests added existing functions package. Likely limited impact users except better adherence best practice make stronger package long run.","code":""},{"path":"https://nceas.github.io/scicomptools/news/index.html","id":"scicomptools-100","dir":"Changelog","previous_headings":"","what":"scicomptools 1.0.0","title":"scicomptools 1.0.0","text":"CRAN release: 2023-06-06 first fully functioning version package. currently ERRORs, WARNINGs, NOTEs returned devtools::check()","code":""}]
